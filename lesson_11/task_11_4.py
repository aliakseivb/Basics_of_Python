# 4. Реализовать проект «Операции с комплексными числами».
# Техническое задание:
#
# Создайте класс «Комплексное число». Комплексное число - это упорядоченная пара чисел, например x,y.
# Для простоты числа берем только целые.
# Перегрузите методы(операторы) сложения/вычитания и умножения комплексных чисел (три метода).
# Правила сложения/умножения можно найти в сети.
# Перегрузите метод __str__ для вывода числа в виде x + yj, где x,y - атрибуты.
# Попробуйте учесть, что y может быть отрицательным.
# Создайте экземпляры класса (комплексные числа), выполните сложение/вычитание/умножение созданных экземпляров.
# Выведите на экран результат.
# Встроенным типом данных complex пользоваться нельзя. Найдите в интернете описание правил сложения/вычитания
# и умножения комплексных чисел.
# При переопределении операторов помним, что возвращается новый объект, Аргументы остаются неизменными.
# Примеры/Тесты:
# Например так:
#
#
# Число 1: 2+3j
# Число 2: -1+1j
# Сложение: 1+4j
# Вычитание: 3+2j
# Умножение: -5-1j

class ComplexDigit:

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return ComplexDigit(x, y)

    def __sub__(self, other):
        x = self.x - other.x
        y = self.y - other.y
        return ComplexDigit(x, y)

    def __mul__(self, other):
        x = self.x * other.x - self.y * other.y
        y = self.x * other.y + other.x * self.y
        return ComplexDigit(x, y)

    def __str__(self):
        sign = '+'
        if self.y < 0:
            sign = ''
        return f'{self.x}{sign}{self.y}j'


nums1 = ComplexDigit(1, 2)
nums2 = ComplexDigit(3, 4)
add = nums1 + nums2
dif = nums1 - nums2
mult = nums1 * nums2
print('число 1: ', nums1)
print('число 2: ', nums2)
print(f'Сложение: {add}')
print(f'Вычитание: {dif}')
print(f'Умножение: {mult}')
