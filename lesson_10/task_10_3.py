# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Формат вывода результата:
#
# Создать не менее пяти-семи экземпляров.
# Выполнить все арифмитические операторы.
# Результаты показать с помощью make_order
# Техническое задание:
#
# Создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# Перегрузить арифметические операторы: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__).
# Вспомнить/посмотреть какие аргументы у операторов и что они возвращают.
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и деление клеток, соответственно.
# Сложение. Число ячеек общей клетки равняется сумме ячеек исходных двух клеток.
# Вычитание. Число ячеек общей клетки равняется разности кол-ва ячеек исходных двух клеток.
# Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение. Если здесь использовать исключение - посмотрите какой тип исключения подойдет лучше всего.
# Умножение. Число ячеек общей клетки равняться произведению кол-ва ячеек исходных двух клеток.
# Деление. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# Реализовать метод make_order(), принимающий количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...;, где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Возвращаемое значение предназначено для последующей передачи в функцию print.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.

class Grid:
    def __init__(self, cell):
        self.cell = cell
        self.sign = '*'

    def __str__(self):
        return f'Количество клеток - {self.cell}'

    def __add__(self, other):
        return self.cell + other.cell

    def __sub__(self, other):
        rez = self.cell - other.cell
        if rez < 0:
            raise ValueError(f'Отрицательное значение =>> {self.cell} < {other.cell}')
        else:
            return self.cell - other.cell

    def __mul__(self, other):
        return self.cell * other.cell

    def __floordiv__(self, other):
        return self.cell // other.cell

    def make_order(self, num_cell_row):
        whole = self.cell // num_cell_row
        remainder = self.cell % num_cell_row
        rez = str((self.sign * num_cell_row + '\n') * whole + self.sign * remainder)
        return rez


if __name__ == '__main__':
    g1 = Grid(3)
    g2 = Grid(20)
    g3 = Grid(15)
    g4 = Grid(70)
    g5 = Grid(7)
    g6 = Grid(39)
    print(g1)
    print(g6)
    print(g1 + g2)
    print(g4 - g3)
    print(g1 * g5)
    print(g6 // g5)
    print(g6.make_order(9))
